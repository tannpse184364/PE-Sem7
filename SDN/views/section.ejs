<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
        integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <title>Section</title>

</head>

<body>
    <section class="section is-small">
        <div class="container mt-4">
            <!-- TABLE -->
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Section Name</th>
                        <th>Description</th>
                        <th>Duration</th>
                        <th>Main Task</th>
                        <th>Course</th>
                        <th class="text-center">
                            <button id="open-add-object-modal-button" class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#object-modal">Add
                                Section</button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <%sections.forEach((section)=> {%>
                        <tr course-id="<%=section.course._id %>">
                            <td class="sectionName-cell">
                                <%=section.sectionName%>
                            </td>
                            <td class="sectionDescription-cell">

                                <%=section.sectionDescription%>
                            </td>
                            <td class="duration-cell">

                                <%=section.duration%>
                            </td>
                            <td class="isMainTask-cell">

                                <%=section.isMainTask%>
                            </td>
                            <td>
                                <%=section.course.courseName%>
                            </td>
                            <td>
                                <span class="open-edit-object-modal-button"
                                    style="color: rgb(184, 135, 0); cursor: pointer;" data-bs-toggle="modal"
                                    data-bs-target="#object-modal">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                </span>
                                <span> | </span>
                                <span class="open-delete-confirm" item-id="<%=section._id%>"
                                    item-name="<%=section.sectionName%>" style="color: rgb(226,
                                            42,
                                            42); cursor: pointer;" data-bs-toggle="modal"
                                    data-bs-target="#confirm-delete-modal">
                                    <i class="fa-regular fa-trash-can"></i>
                                </span>
                            </td>

                        </tr>
                        <% }) %>
                </tbody>
            </table>

        </div>

        <!-- CONFIRM DELETE MODAL -->
        <div id="confirm-delete-modal" class="modal fade" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close delete" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-warning">
                            <strong id="confirm-message"></strong>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <form id="delete-form" method="POST">
                            <button id="yes-button" class="btn btn-success">Yes</button>
                        </form>
                        <button id="no-button" class="btn btn-secondary" data-bs-dismiss="modal"
                            aria-label="Close">No</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- ADD/EDIT MODAL -->
        <div id="object-modal" class="modal fade" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 id="object-modal-title" class="modal-title"></h5>
                        <button type="button" class="btn-close delete" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <form id="object-form" method="POST">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Section Name</label>
                                <input required class="form-control input" name="sectionName" type="text"
                                    placeholder="Text input">
                                <div class="form-text text-danger input-help" style="display: none;"></div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea required class="form-control textarea" name="sectionDescription" type="text"
                                    placeholder="Text input"></textarea>
                                <div class="form-text text-danger input-help" style="display: none;"></div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Duration</label>
                                <input required class="form-control input" name="duration" type="number"
                                    placeholder="Text input">
                                <div class="form-text text-danger input-help" style="display: none;"></div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Course</label>
                                <select name="course" class="form-select" required>
                                    <option value="">No Course</option>
                                    <% courses.forEach(course=>{ %>
                                        <option value="<%=course._id %>">
                                            <%=course.courseName %>
                                        </option>
                                        <% }) %>
                                </select>
                            </div>
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" name="isMainTask"
                                        id="switchCheckDefault">
                                    <label class="form-check-label" for="switchCheckDefault">Is Main Task</label>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button id="submit-object-button" class="btn btn-success"></button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </section>
</body>

<script>
    //  CONFIRM DELETE MODAL
    const openDeleteConfirmButton = document.querySelectorAll(".open-delete-confirm")
    const confirmDeleteModal = document.getElementById("confirm-delete-modal")
    const confirmMessage = document.getElementById("confirm-message")
    const deleteForm = document.getElementById("delete-form")
    const noButton = document.getElementById("no-button")

    openDeleteConfirmButton.forEach(button => {
        button.addEventListener("click", (e) => {
            const itemId = button.getAttribute("item-id");
            const itemName = button.getAttribute("item-name");
            confirmMessage.innerText = "Are you sure to delete " + itemName + "?"
            deleteForm.action = "/view/sections/" + itemId + "?_method=DELETE"
        });
    });



    //  ADD MODAL

    const objectModalTilte = document.getElementById("object-modal-title")
    const objectForm = document.getElementById("object-form")
    const openAddObjectModalButton = document.getElementById("open-add-object-modal-button")
    const openEditObjectModalButton = document.querySelectorAll(".open-edit-object-modal-button")
    const objectModal = document.getElementById("object-modal")
    const submitObjectButton = document.getElementById("submit-object-button")

    openAddObjectModalButton.addEventListener("click", () => {
        objectForm.action = "/view/sections";
        objectModalTilte.innerText = "Add"
        submitObjectButton.innerText = "Add New";

        // Reset form and validation states
        objectForm.reset();
        const inputs = objectForm.querySelectorAll('.form-control');
        inputs.forEach(input => {
            input.classList.remove('is-valid', 'is-invalid');
            const helpElement = input.closest('.mb-3')?.querySelector('.input-help');
            if (helpElement) {
                helpElement.style.display = 'none';
            }
        });
    });

    // EDIT
    openEditObjectModalButton.forEach(button => {
        button.addEventListener("click", (e) => {
            objectModalTilte.innerText = "Edit"
            submitObjectButton.innerText = "Save Changes";

            const tr = button.closest("tr");
            const objectCourseId = tr.getAttribute("course-id").toString();
            const objectId = tr.querySelector(".open-delete-confirm").getAttribute("item-id");
            const objectName = tr.querySelector(".sectionName-cell").innerText.trim();
            const objectDescription = tr.querySelector(".sectionDescription-cell").innerText.trim();
            const objectDuration = tr.querySelector(".duration-cell").innerText.trim();
            const objectIsMainTask = tr.querySelector(".isMainTask-cell").innerText.trim();

            objectForm.action = "/view/sections/" + objectId + "?_method=PUT";
            objectForm.querySelector("input[name='sectionName']").value = objectName;
            objectForm.querySelector("input[name='duration']").value = objectDuration;
            objectForm.querySelector("textarea[name='sectionDescription']").value = objectDescription;
            objectForm.querySelector("select[name='course']").value = objectCourseId;
            objectForm.querySelector("input[name='isMainTask']").checked = (objectIsMainTask === "true");
        });
    });

    // VALIDATE INPUT
    const objectNameInput = document.querySelector('input[name="sectionName"]');

    objectNameInput.addEventListener("input", function () {
        const value = this.value;
        const helpElement = this.closest('.mb-3').querySelector('.input-help');

        // Reset states
        this.classList.remove('is-invalid', 'is-valid');
        helpElement.style.display = 'none';

        if (value.length === 0) {
            return; // Don't validate empty input
        }

        // Validation regex: only a-z, A-Z, 0-9, and spaces allowed
        const allowedCharsRegex = /^[a-zA-Z0-9\s]+$/;

        // Check if contains only allowed characters
        if (!allowedCharsRegex.test(value)) {
            this.classList.add('is-invalid');
            helpElement.textContent = 'Section name can only contain letters, numbers, and spaces.';
            helpElement.style.display = 'block';
            return;
        }

        // Check if each word starts with capital letter
        const words = value.trim().split(/\s+/);
        const capitalizedWordsRegex = /^[A-Z][a-zA-Z0-9]*$/;

        let hasValidCapitalization = true;
        for (let word of words) {
            if (word.length > 0 && !capitalizedWordsRegex.test(word)) {
                hasValidCapitalization = false;
                break;
            }
        }

        if (!hasValidCapitalization) {
            this.classList.add('is-invalid');
            helpElement.textContent = 'Each word must begin with a capital letter.';
            helpElement.style.display = 'block';
            return;
        }

        // Check for multiple consecutive spaces
        if (/\s{2,}/.test(value)) {
            this.classList.add('is-invalid');
            helpElement.textContent = 'Multiple consecutive spaces are not allowed.';
            helpElement.style.display = 'block';
            return;
        }

        // Check for leading/trailing spaces
        if (value !== value.trim()) {
            this.classList.add('is-invalid');
            helpElement.textContent = 'Section name cannot start or end with spaces.';
            helpElement.style.display = 'block';
            return;
        }

        // If all validations pass
        this.classList.add('is-valid');
    });

    // Auto-capitalize function (optional - helps users)
    objectNameInput.addEventListener("blur", function () {
        if (this.value.length > 0) {
            // Auto-capitalize each word
            const words = this.value.trim().split(/\s+/);
            const capitalizedWords = words.map(word => {
                if (word.length > 0) {
                    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
                }
                return word;
            });
            this.value = capitalizedWords.join(' ');

            // Trigger validation again after auto-capitalization
            this.dispatchEvent(new Event('input'));
        }
    });

    // Form submission validation
    objectForm.addEventListener("submit", function (e) {
        const sectionName = objectNameInput.value.trim();

        // Handle checkbox boolean conversion
        const checkbox = this.querySelector('input[name="isMainTask"]');
        // Remove the checkbox temporarily and add a hidden input with the boolean value
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'isMainTask';
        hiddenInput.value = checkbox.checked ? 'true' : 'false';

        // Temporarily disable checkbox and add hidden input
        checkbox.disabled = true;
        this.appendChild(hiddenInput);

        // Final validation before submission
        if (sectionName.length === 0) {
            e.preventDefault();
            // Re-enable checkbox and remove hidden input
            checkbox.disabled = false;
            this.removeChild(hiddenInput);

            objectNameInput.classList.add('is-invalid');
            const helpElement = objectNameInput.closest('.mb-3').querySelector('.input-help');
            helpElement.textContent = 'Section name is required.';
            helpElement.style.display = 'block';
            return false;
        }

        // Check if input has validation errors
        if (objectNameInput.classList.contains('is-invalid')) {
            e.preventDefault();
            // Re-enable checkbox and remove hidden input
            checkbox.disabled = false;
            this.removeChild(hiddenInput);
            return false;
        }
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</html>